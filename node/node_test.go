package node

import (
	"errors"
	"fmt"
	"testing"

	"github.com/han0110/configo/util"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type SimpleConfig struct {
	String  string  `yaml:"string"`
	Bool    bool    `yaml:"bool"`
	Int     int     `yaml:"int"`
	Int8    int8    `yaml:"int8"`
	Int16   int16   `yaml:"int16"`
	Int32   int32   `yaml:"int32"`
	Int64   int64   `yaml:"int64"`
	Uint    uint    `yaml:"uint"`
	Uint8   uint8   `yaml:"uint8"`
	Uint16  uint16  `yaml:"uint16"`
	Uint32  uint32  `yaml:"uint32"`
	Uint64  uint64  `yaml:"uint64"`
	Float32 float32 `yaml:"float32"`
	Float64 float64 `yaml:"float64"`
}

type MapConfig struct {
	StringMap         map[string]string          `yaml:"stringMap"`
	BoolMap           map[string]bool            `yaml:"boolMap"`
	IntMap            map[string]int             `yaml:"intMap"`
	Int8Map           map[string]int8            `yaml:"int8Map"`
	Int16Map          map[string]int16           `yaml:"int16Map"`
	Int32Map          map[string]int32           `yaml:"int32Map"`
	Int64Map          map[string]int64           `yaml:"int64Map"`
	UintMap           map[string]uint            `yaml:"uintMap"`
	Uint8Map          map[string]uint8           `yaml:"uint8Map"`
	Uint16Map         map[string]uint16          `yaml:"uint16Map"`
	Uint32Map         map[string]uint32          `yaml:"uint32Map"`
	Uint64Map         map[string]uint64          `yaml:"uint64Map"`
	Float32Map        map[string]float32         `yaml:"float32Map"`
	Float64Map        map[string]float64         `yaml:"float64Map"`
	SimpleMap         map[string]SimpleConfig    `yaml:"simpleMap"`
	PtrSimpleMap      map[string]*SimpleConfig   `yaml:"ptrSimpleMap"`
	SimpleSliceMap    map[string][]SimpleConfig  `yaml:"simpleSliceMap"`
	PtrSimpleSliceMap map[string][]*SimpleConfig `yaml:"ptrSimpleSliceMap"`
}

type SliceConfig struct {
	StringSlice    []string            `yaml:"stringSlice"`
	BoolSlice      []bool              `yaml:"boolSlice"`
	IntSlice       []int               `yaml:"intSlice"`
	Int8Slice      []int8              `yaml:"int8Slice"`
	Int16Slice     []int16             `yaml:"int16Slice"`
	Int32Slice     []int32             `yaml:"int32Slice"`
	Int64Slice     []int64             `yaml:"int64Slice"`
	UintSlice      []uint              `yaml:"uintSlice"`
	Uint8Slice     []uint8             `yaml:"uint8Slice"`
	Uint16Slice    []uint16            `yaml:"uint16Slice"`
	Uint32Slice    []uint32            `yaml:"uint32Slice"`
	Uint64Slice    []uint64            `yaml:"uint64Slice"`
	Float32Slice   []float32           `yaml:"float32Slice"`
	Float64Slice   []float64           `yaml:"float64Slice"`
	StringMapSlice []map[string]string `yaml:"stringMapSlice"`
	SimpleSlice    []SimpleConfig      `yaml:"simpleSlice"`
	PtrSimpleSlice []*SimpleConfig     `yaml:"ptrSimpleSlice"`
}

type EmbeddedConfig struct {
	SimpleConfig
	MapConfig
	SliceConfig
	Simple SimpleConfig `yaml:"simple"`
	Map    MapConfig    `yaml:"map"`
	Slice  SliceConfig  `yaml:"slice"`
}

func TestWalk(t *testing.T) { // nolint: funlen
	var result []string
	nodeNameCallback := func(node *Node) error {
		result = append(result, node.Key)
		return nil
	}

	mockErr := errors.New("some error when walking to this node")

	testcases := []struct {
		description string
		element     interface{}
		callback    WalkCallback
		expected    interface{}
		err         error
	}{
		{
			description: "walk through SimpleConfig",
			element:     &SimpleConfig{},
			callback:    nodeNameCallback,
			expected: []string{
				"string",
				"bool",
				"int",
				"int8",
				"int16",
				"int32",
				"int64",
				"uint",
				"uint8",
				"uint16",
				"uint32",
				"uint64",
				"float32",
				"float64",
			},
		},
		{
			description: "walk through MapConfig",
			element:     &MapConfig{},
			callback:    nodeNameCallback,
			expected: []string{
				"string.map",
				"bool.map",
				"int.map",
				"int8.map",
				"int16.map",
				"int32.map",
				"int64.map",
				"uint.map",
				"uint8.map",
				"uint16.map",
				"uint32.map",
				"uint64.map",
				"float32.map",
				"float64.map",
				"simple.map",
				"ptr.simple.map",
				"simple.slice.map",
				"ptr.simple.slice.map",
			},
		},
		{
			description: "walk through SliceConfig",
			element:     &SliceConfig{},
			callback:    nodeNameCallback,
			expected: []string{
				"string.slice",
				"bool.slice",
				"int.slice",
				"int8.slice",
				"int16.slice",
				"int32.slice",
				"int64.slice",
				"uint.slice",
				"uint8.slice",
				"uint16.slice",
				"uint32.slice",
				"uint64.slice",
				"float32.slice",
				"float64.slice",
				"string.map.slice",
				"simple.slice",
				"ptr.simple.slice",
			},
		},
		{
			description: "walk through EmbeddedConfig",
			element:     &EmbeddedConfig{},
			callback:    nodeNameCallback,
			expected: []string{
				"string",
				"bool",
				"int",
				"int8",
				"int16",
				"int32",
				"int64",
				"uint",
				"uint8",
				"uint16",
				"uint32",
				"uint64",
				"float32",
				"float64",
				"string.map",
				"bool.map",
				"int.map",
				"int8.map",
				"int16.map",
				"int32.map",
				"int64.map",
				"uint.map",
				"uint8.map",
				"uint16.map",
				"uint32.map",
				"uint64.map",
				"float32.map",
				"float64.map",
				"simple.map",
				"ptr.simple.map",
				"simple.slice.map",
				"ptr.simple.slice.map",
				"string.slice",
				"bool.slice",
				"int.slice",
				"int8.slice",
				"int16.slice",
				"int32.slice",
				"int64.slice",
				"uint.slice",
				"uint8.slice",
				"uint16.slice",
				"uint32.slice",
				"uint64.slice",
				"float32.slice",
				"float64.slice",
				"string.map.slice",
				"simple.slice",
				"ptr.simple.slice",
				"simple.string",
				"simple.bool",
				"simple.int",
				"simple.int8",
				"simple.int16",
				"simple.int32",
				"simple.int64",
				"simple.uint",
				"simple.uint8",
				"simple.uint16",
				"simple.uint32",
				"simple.uint64",
				"simple.float32",
				"simple.float64",
				"map.string.map",
				"map.bool.map",
				"map.int.map",
				"map.int8.map",
				"map.int16.map",
				"map.int32.map",
				"map.int64.map",
				"map.uint.map",
				"map.uint8.map",
				"map.uint16.map",
				"map.uint32.map",
				"map.uint64.map",
				"map.float32.map",
				"map.float64.map",
				"map.simple.map",
				"map.ptr.simple.map",
				"map.simple.slice.map",
				"map.ptr.simple.slice.map",
				"slice.string.slice",
				"slice.bool.slice",
				"slice.int.slice",
				"slice.int8.slice",
				"slice.int16.slice",
				"slice.int32.slice",
				"slice.int64.slice",
				"slice.uint.slice",
				"slice.uint8.slice",
				"slice.uint16.slice",
				"slice.uint32.slice",
				"slice.uint64.slice",
				"slice.float32.slice",
				"slice.float64.slice",
				"slice.string.map.slice",
				"slice.simple.slice",
				"slice.ptr.simple.slice",
			},
		},
		{
			description: "walk with error",
			element:     &SimpleConfig{},
			callback:    func(_ *Node) error { return mockErr },
			err:         mockErr,
		},
	}

	for _, testcase := range testcases {
		t.Run(testcase.description, func(t *testing.T) {
			defer func() {
				result = []string{}
			}()

			root, err := New(testcase.element, EncoderOption{})
			require.NoError(t, err)

			err = root.Walk(testcase.callback)
			if testcase.err != nil {
				require.EqualError(t, testcase.err, fmt.Sprint(err))
			} else {
				require.NoError(t, err)
				assert.Equal(t, testcase.expected, result)
			}
		})
	}
}

func TestFill(t *testing.T) { // nolint: funlen
	testcases := []struct {
		description string
		element     interface{}
		keys        []string
		data        map[string]string
		expected    interface{}
		err         error
	}{
		{
			description: "fill SimpleConfig",
			element:     &SimpleConfig{},
			keys: []string{
				"string",
				"bool",
				"int",
				"int8",
				"int16",
				"int32",
				"int64",
				"uint",
				"uint8",
				"uint16",
				"uint32",
				"uint64",
				"float32",
				"float64",
			},
			data: map[string]string{
				"string":  "test",
				"bool":    "true",
				"int":     "9223372036854775807",
				"int8":    "127",
				"int16":   "32767",
				"int32":   "2147483647",
				"int64":   "9223372036854775807",
				"uint":    "18446744073709551615",
				"uint8":   "255",
				"uint16":  "65535",
				"uint32":  "4294967295",
				"uint64":  "18446744073709551615",
				"float32": "65535.00390625",
				"float64": "65535.00390625",
			},
			expected: &SimpleConfig{
				String:  "test",
				Bool:    true,
				Int:     int(9223372036854775807),
				Int8:    int8(127),
				Int16:   int16(32767),
				Int32:   int32(2147483647),
				Int64:   int64(9223372036854775807),
				Uint:    uint(18446744073709551615),
				Uint8:   uint8(255),
				Uint16:  uint16(65535),
				Uint32:  uint32(4294967295),
				Uint64:  uint64(18446744073709551615),
				Float32: float32(65535.00390625),
				Float64: float64(65535.00390625),
			},
		},
		{
			description: "fill MapConfig",
			element:     &MapConfig{},
			keys: []string{
				"string.map.a",
				"string.map.b",
				"string.map.c",
				"bool.map.a",
				"bool.map.b",
				"bool.map.c",
				"int.map.a",
				"int.map.b",
				"int.map.c",
				"int8.map.a",
				"int8.map.b",
				"int8.map.c",
				"int16.map.a",
				"int16.map.b",
				"int16.map.c",
				"int32.map.a",
				"int32.map.b",
				"int32.map.c",
				"int64.map.a",
				"int64.map.b",
				"int64.map.c",
				"uint.map.a",
				"uint.map.b",
				"uint.map.c",
				"uint8.map.a",
				"uint8.map.b",
				"uint8.map.c",
				"uint16.map.a",
				"uint16.map.b",
				"uint16.map.c",
				"uint32.map.a",
				"uint32.map.b",
				"uint32.map.c",
				"uint64.map.a",
				"uint64.map.b",
				"uint64.map.c",
				"float32.map.a",
				"float32.map.b",
				"float32.map.c",
				"float64.map.a",
				"float64.map.b",
				"float64.map.c",
				"ptr.simple.map.a.string",
				"ptr.simple.map.a.bool",
				"ptr.simple.map.a.int",
				"ptr.simple.map.a.int8",
				"ptr.simple.map.a.int16",
				"ptr.simple.map.a.int32",
				"ptr.simple.map.a.int64",
				"ptr.simple.map.a.uint",
				"ptr.simple.map.a.uint8",
				"ptr.simple.map.a.uint16",
				"ptr.simple.map.a.uint32",
				"ptr.simple.map.a.uint64",
				"ptr.simple.map.a.float32",
				"ptr.simple.map.a.float64",
				"simple.map.a.string",
				"simple.map.a.bool",
				"simple.map.a.int",
				"simple.map.a.int8",
				"simple.map.a.int16",
				"simple.map.a.int32",
				"simple.map.a.int64",
				"simple.map.a.uint",
				"simple.map.a.uint8",
				"simple.map.a.uint16",
				"simple.map.a.uint32",
				"simple.map.a.uint64",
				"simple.map.a.float32",
				"simple.map.a.float64",
				"simple.slice.map.a.0.string",
				"simple.slice.map.a.0.bool",
				"simple.slice.map.a.0.int",
				"simple.slice.map.a.0.int8",
				"simple.slice.map.a.0.int16",
				"simple.slice.map.a.0.int32",
				"simple.slice.map.a.0.int64",
				"simple.slice.map.a.0.uint",
				"simple.slice.map.a.0.uint8",
				"simple.slice.map.a.0.uint16",
				"simple.slice.map.a.0.uint32",
				"simple.slice.map.a.0.uint64",
				"simple.slice.map.a.0.float32",
				"simple.slice.map.a.0.float64",
				"simple.slice.map.a.1.string",
				"simple.slice.map.a.1.bool",
				"simple.slice.map.a.1.int",
				"simple.slice.map.a.1.int8",
				"simple.slice.map.a.1.int16",
				"simple.slice.map.a.1.int32",
				"simple.slice.map.a.1.int64",
				"simple.slice.map.a.1.uint",
				"simple.slice.map.a.1.uint8",
				"simple.slice.map.a.1.uint16",
				"simple.slice.map.a.1.uint32",
				"simple.slice.map.a.1.uint64",
				"simple.slice.map.a.1.float32",
				"simple.slice.map.a.1.float64",
			},
			data: map[string]string{
				"string.map.a":                 "testA",
				"string.map.b":                 "testB",
				"string.map.c":                 "testC",
				"bool.map.a":                   "true",
				"bool.map.b":                   "false",
				"bool.map.c":                   "t",
				"int.map.a":                    "9223372036854775807",
				"int.map.b":                    "0",
				"int.map.c":                    "-9223372036854775808",
				"int8.map.a":                   "127",
				"int8.map.b":                   "0",
				"int8.map.c":                   "-128",
				"int16.map.a":                  "32767",
				"int16.map.b":                  "0",
				"int16.map.c":                  "-32768",
				"int32.map.a":                  "2147483647",
				"int32.map.b":                  "0",
				"int32.map.c":                  "-2147483648",
				"int64.map.a":                  "9223372036854775807",
				"int64.map.b":                  "0",
				"int64.map.c":                  "-9223372036854775808",
				"uint.map.a":                   "18446744073709551615",
				"uint.map.b":                   "0",
				"uint.map.c":                   "64",
				"uint8.map.a":                  "255",
				"uint8.map.b":                  "0",
				"uint8.map.c":                  "8",
				"uint16.map.a":                 "65535",
				"uint16.map.b":                 "0",
				"uint16.map.c":                 "16",
				"uint32.map.a":                 "4294967295",
				"uint32.map.b":                 "0",
				"uint32.map.c":                 "32",
				"uint64.map.a":                 "18446744073709551615",
				"uint64.map.b":                 "0",
				"uint64.map.c":                 "64",
				"float32.map.a":                "65535.00390625",
				"float32.map.b":                "65535.25",
				"float32.map.c":                "65535.5",
				"float64.map.a":                "65535.00390625",
				"float64.map.b":                "65535.25",
				"float64.map.c":                "65535.5",
				"ptr.simple.map.a.string":      "test",
				"ptr.simple.map.a.bool":        "true",
				"ptr.simple.map.a.int":         "9223372036854775807",
				"ptr.simple.map.a.int8":        "127",
				"ptr.simple.map.a.int16":       "32767",
				"ptr.simple.map.a.int32":       "2147483647",
				"ptr.simple.map.a.int64":       "9223372036854775807",
				"ptr.simple.map.a.uint":        "18446744073709551615",
				"ptr.simple.map.a.uint8":       "255",
				"ptr.simple.map.a.uint16":      "65535",
				"ptr.simple.map.a.uint32":      "4294967295",
				"ptr.simple.map.a.uint64":      "18446744073709551615",
				"ptr.simple.map.a.float32":     "65535.00390625",
				"ptr.simple.map.a.float64":     "65535.00390625",
				"simple.map.a.string":          "test",
				"simple.map.a.bool":            "true",
				"simple.map.a.int":             "9223372036854775807",
				"simple.map.a.int8":            "127",
				"simple.map.a.int16":           "32767",
				"simple.map.a.int32":           "2147483647",
				"simple.map.a.int64":           "9223372036854775807",
				"simple.map.a.uint":            "18446744073709551615",
				"simple.map.a.uint8":           "255",
				"simple.map.a.uint16":          "65535",
				"simple.map.a.uint32":          "4294967295",
				"simple.map.a.uint64":          "18446744073709551615",
				"simple.map.a.float32":         "65535.00390625",
				"simple.map.a.float64":         "65535.00390625",
				"simple.slice.map.a.0.string":  "testA",
				"simple.slice.map.a.0.bool":    "true",
				"simple.slice.map.a.0.int":     "9223372036854775807",
				"simple.slice.map.a.0.int8":    "127",
				"simple.slice.map.a.0.int16":   "32767",
				"simple.slice.map.a.0.int32":   "2147483647",
				"simple.slice.map.a.0.int64":   "9223372036854775807",
				"simple.slice.map.a.0.uint":    "18446744073709551615",
				"simple.slice.map.a.0.uint8":   "255",
				"simple.slice.map.a.0.uint16":  "65535",
				"simple.slice.map.a.0.uint32":  "4294967295",
				"simple.slice.map.a.0.uint64":  "18446744073709551615",
				"simple.slice.map.a.0.float32": "65535.00390625",
				"simple.slice.map.a.0.float64": "65535.00390625",
				"simple.slice.map.a.1.string":  "testB",
				"simple.slice.map.a.1.bool":    "t",
				"simple.slice.map.a.1.int":     "64",
				"simple.slice.map.a.1.int8":    "8",
				"simple.slice.map.a.1.int16":   "16",
				"simple.slice.map.a.1.int32":   "32",
				"simple.slice.map.a.1.int64":   "64",
				"simple.slice.map.a.1.uint":    "64",
				"simple.slice.map.a.1.uint8":   "8",
				"simple.slice.map.a.1.uint16":  "16",
				"simple.slice.map.a.1.uint32":  "32",
				"simple.slice.map.a.1.uint64":  "64",
				"simple.slice.map.a.1.float32": "32",
				"simple.slice.map.a.1.float64": "64",
			},
			expected: &MapConfig{
				StringMap:  map[string]string{"a": "testA", "b": "testB", "c": "testC"},
				BoolMap:    map[string]bool{"a": true, "b": false, "c": true},
				IntMap:     map[string]int{"a": 9223372036854775807, "b": 0, "c": -9223372036854775808},
				Int8Map:    map[string]int8{"a": 127, "b": 0, "c": -128},
				Int16Map:   map[string]int16{"a": 32767, "b": 0, "c": -32768},
				Int32Map:   map[string]int32{"a": 2147483647, "b": 0, "c": -2147483648},
				Int64Map:   map[string]int64{"a": 9223372036854775807, "b": 0, "c": -9223372036854775808},
				UintMap:    map[string]uint{"a": 18446744073709551615, "b": 0, "c": 64},
				Uint8Map:   map[string]uint8{"a": 255, "b": 0, "c": 8},
				Uint16Map:  map[string]uint16{"a": 65535, "b": 0, "c": 16},
				Uint32Map:  map[string]uint32{"a": 4294967295, "b": 0, "c": 32},
				Uint64Map:  map[string]uint64{"a": 18446744073709551615, "b": 0, "c": 64},
				Float32Map: map[string]float32{"a": 65535.00390625, "b": 65535.25, "c": 65535.5},
				Float64Map: map[string]float64{"a": 65535.00390625, "b": 65535.25, "c": 65535.5},
				PtrSimpleMap: map[string]*SimpleConfig{
					"a": {
						String:  "test",
						Bool:    true,
						Int:     int(9223372036854775807),
						Int8:    int8(127),
						Int16:   int16(32767),
						Int32:   int32(2147483647),
						Int64:   int64(9223372036854775807),
						Uint:    uint(18446744073709551615),
						Uint8:   uint8(255),
						Uint16:  uint16(65535),
						Uint32:  uint32(4294967295),
						Uint64:  uint64(18446744073709551615),
						Float32: float32(65535.00390625),
						Float64: float64(65535.00390625),
					},
				},
				SimpleMap: map[string]SimpleConfig{
					"a": {
						String:  "test",
						Bool:    true,
						Int:     int(9223372036854775807),
						Int8:    int8(127),
						Int16:   int16(32767),
						Int32:   int32(2147483647),
						Int64:   int64(9223372036854775807),
						Uint:    uint(18446744073709551615),
						Uint8:   uint8(255),
						Uint16:  uint16(65535),
						Uint32:  uint32(4294967295),
						Uint64:  uint64(18446744073709551615),
						Float32: float32(65535.00390625),
						Float64: float64(65535.00390625),
					},
				},
				SimpleSliceMap: map[string][]SimpleConfig{
					"a": {
						{
							String:  "testA",
							Bool:    true,
							Int:     int(9223372036854775807),
							Int8:    int8(127),
							Int16:   int16(32767),
							Int32:   int32(2147483647),
							Int64:   int64(9223372036854775807),
							Uint:    uint(18446744073709551615),
							Uint8:   uint8(255),
							Uint16:  uint16(65535),
							Uint32:  uint32(4294967295),
							Uint64:  uint64(18446744073709551615),
							Float32: float32(65535.00390625),
							Float64: float64(65535.00390625),
						},
						{
							String:  "testB",
							Bool:    true,
							Int:     int(64),
							Int8:    int8(8),
							Int16:   int16(16),
							Int32:   int32(32),
							Int64:   int64(64),
							Uint:    uint(64),
							Uint8:   uint8(8),
							Uint16:  uint16(16),
							Uint32:  uint32(32),
							Uint64:  uint64(64),
							Float32: float32(32),
							Float64: float64(64),
						},
					},
				},
				PtrSimpleSliceMap: map[string][]*SimpleConfig{},
			},
		},
		{
			description: "fill SliceConfig",
			element:     &SliceConfig{},
			keys: []string{
				"string.slice.0",
				"string.slice.1",
				"string.slice.2",
				"bool.slice.0",
				"bool.slice.1",
				"bool.slice.2",
				"int.slice.0",
				"int.slice.1",
				"int.slice.2",
				"int8.slice.0",
				"int8.slice.1",
				"int8.slice.2",
				"int16.slice.0",
				"int16.slice.1",
				"int16.slice.2",
				"int32.slice.0",
				"int32.slice.1",
				"int32.slice.2",
				"int64.slice.0",
				"int64.slice.1",
				"int64.slice.2",
				"uint.slice.0",
				"uint.slice.1",
				"uint.slice.2",
				"uint8.slice.0",
				"uint8.slice.1",
				"uint8.slice.2",
				"uint16.slice.0",
				"uint16.slice.1",
				"uint16.slice.2",
				"uint32.slice.0",
				"uint32.slice.1",
				"uint32.slice.2",
				"uint64.slice.0",
				"uint64.slice.1",
				"uint64.slice.2",
				"float32.slice.0",
				"float32.slice.1",
				"float32.slice.2",
				"float64.slice.0",
				"float64.slice.1",
				"float64.slice.2",
				"string.map.slice.0.a",
				"string.map.slice.0.b",
				"string.map.slice.0.c",
				"string.map.slice.1.d",
				"string.map.slice.1.e",
				"string.map.slice.1.f",
				"string.map.slice.2.g",
				"string.map.slice.2.h",
				"string.map.slice.2.i",
				"simple.slice.0.string",
				"simple.slice.0.bool",
				"simple.slice.0.int",
				"simple.slice.0.int8",
				"simple.slice.0.int16",
				"simple.slice.0.int32",
				"simple.slice.0.int64",
				"simple.slice.0.uint",
				"simple.slice.0.uint8",
				"simple.slice.0.uint16",
				"simple.slice.0.uint32",
				"simple.slice.0.uint64",
				"simple.slice.0.float32",
				"simple.slice.0.float64",
				"simple.slice.1.string",
				"simple.slice.1.bool",
				"simple.slice.1.int",
				"simple.slice.1.int8",
				"simple.slice.1.int16",
				"simple.slice.1.int32",
				"simple.slice.1.int64",
				"simple.slice.1.uint",
				"simple.slice.1.uint8",
				"simple.slice.1.uint16",
				"simple.slice.1.uint32",
				"simple.slice.1.uint64",
				"simple.slice.1.float32",
				"simple.slice.1.float64",
				"ptr.simple.slice.0.string",
				"ptr.simple.slice.0.bool",
				"ptr.simple.slice.0.int",
				"ptr.simple.slice.0.int8",
				"ptr.simple.slice.0.int16",
				"ptr.simple.slice.0.int32",
				"ptr.simple.slice.0.int64",
				"ptr.simple.slice.0.uint",
				"ptr.simple.slice.0.uint8",
				"ptr.simple.slice.0.uint16",
				"ptr.simple.slice.0.uint32",
				"ptr.simple.slice.0.uint64",
				"ptr.simple.slice.0.float32",
				"ptr.simple.slice.0.float64",
				"ptr.simple.slice.1.string",
				"ptr.simple.slice.1.bool",
				"ptr.simple.slice.1.int",
				"ptr.simple.slice.1.int8",
				"ptr.simple.slice.1.int16",
				"ptr.simple.slice.1.int32",
				"ptr.simple.slice.1.int64",
				"ptr.simple.slice.1.uint",
				"ptr.simple.slice.1.uint8",
				"ptr.simple.slice.1.uint16",
				"ptr.simple.slice.1.uint32",
				"ptr.simple.slice.1.uint64",
				"ptr.simple.slice.1.float32",
				"ptr.simple.slice.1.float64",
			},
			data: map[string]string{
				"string.slice.0":             "testA",
				"string.slice.1":             "testB",
				"string.slice.2":             "testC",
				"bool.slice.0":               "true",
				"bool.slice.1":               "false",
				"bool.slice.2":               "t",
				"int.slice.0":                "9223372036854775807",
				"int.slice.1":                "0",
				"int.slice.2":                "-9223372036854775808",
				"int8.slice.0":               "127",
				"int8.slice.1":               "0",
				"int8.slice.2":               "-128",
				"int16.slice.0":              "32767",
				"int16.slice.1":              "0",
				"int16.slice.2":              "-32768",
				"int32.slice.0":              "2147483647",
				"int32.slice.1":              "0",
				"int32.slice.2":              "-2147483648",
				"int64.slice.0":              "9223372036854775807",
				"int64.slice.1":              "0",
				"int64.slice.2":              "-9223372036854775808",
				"uint.slice.0":               "18446744073709551615",
				"uint.slice.1":               "0",
				"uint.slice.2":               "64",
				"uint8.slice.0":              "255",
				"uint8.slice.1":              "0",
				"uint8.slice.2":              "8",
				"uint16.slice.0":             "65535",
				"uint16.slice.1":             "0",
				"uint16.slice.2":             "16",
				"uint32.slice.0":             "4294967295",
				"uint32.slice.1":             "0",
				"uint32.slice.2":             "32",
				"uint64.slice.0":             "18446744073709551615",
				"uint64.slice.1":             "0",
				"uint64.slice.2":             "64",
				"float32.slice.0":            "65535.00390625",
				"float32.slice.1":            "65535.25",
				"float32.slice.2":            "65535.5",
				"float64.slice.0":            "65535.00390625",
				"float64.slice.1":            "65535.25",
				"float64.slice.2":            "65535.5",
				"string.map.slice.0.a":       "a",
				"string.map.slice.0.b":       "b",
				"string.map.slice.0.c":       "c",
				"string.map.slice.1.d":       "d",
				"string.map.slice.1.e":       "e",
				"string.map.slice.1.f":       "f",
				"string.map.slice.2.g":       "g",
				"string.map.slice.2.h":       "h",
				"string.map.slice.2.i":       "i",
				"simple.slice.0.string":      "testA",
				"simple.slice.0.bool":        "true",
				"simple.slice.0.int":         "9223372036854775807",
				"simple.slice.0.int8":        "127",
				"simple.slice.0.int16":       "32767",
				"simple.slice.0.int32":       "2147483647",
				"simple.slice.0.int64":       "9223372036854775807",
				"simple.slice.0.uint":        "18446744073709551615",
				"simple.slice.0.uint8":       "255",
				"simple.slice.0.uint16":      "65535",
				"simple.slice.0.uint32":      "4294967295",
				"simple.slice.0.uint64":      "18446744073709551615",
				"simple.slice.0.float32":     "65535.00390625",
				"simple.slice.0.float64":     "65535.00390625",
				"simple.slice.1.string":      "testB",
				"simple.slice.1.bool":        "t",
				"simple.slice.1.int":         "64",
				"simple.slice.1.int8":        "8",
				"simple.slice.1.int16":       "16",
				"simple.slice.1.int32":       "32",
				"simple.slice.1.int64":       "64",
				"simple.slice.1.uint":        "64",
				"simple.slice.1.uint8":       "8",
				"simple.slice.1.uint16":      "16",
				"simple.slice.1.uint32":      "32",
				"simple.slice.1.uint64":      "64",
				"simple.slice.1.float32":     "32",
				"simple.slice.1.float64":     "64",
				"ptr.simple.slice.0.string":  "testA",
				"ptr.simple.slice.0.bool":    "true",
				"ptr.simple.slice.0.int":     "9223372036854775807",
				"ptr.simple.slice.0.int8":    "127",
				"ptr.simple.slice.0.int16":   "32767",
				"ptr.simple.slice.0.int32":   "2147483647",
				"ptr.simple.slice.0.int64":   "9223372036854775807",
				"ptr.simple.slice.0.uint":    "18446744073709551615",
				"ptr.simple.slice.0.uint8":   "255",
				"ptr.simple.slice.0.uint16":  "65535",
				"ptr.simple.slice.0.uint32":  "4294967295",
				"ptr.simple.slice.0.uint64":  "18446744073709551615",
				"ptr.simple.slice.0.float32": "65535.00390625",
				"ptr.simple.slice.0.float64": "65535.00390625",
				"ptr.simple.slice.1.string":  "testB",
				"ptr.simple.slice.1.bool":    "t",
				"ptr.simple.slice.1.int":     "64",
				"ptr.simple.slice.1.int8":    "8",
				"ptr.simple.slice.1.int16":   "16",
				"ptr.simple.slice.1.int32":   "32",
				"ptr.simple.slice.1.int64":   "64",
				"ptr.simple.slice.1.uint":    "64",
				"ptr.simple.slice.1.uint8":   "8",
				"ptr.simple.slice.1.uint16":  "16",
				"ptr.simple.slice.1.uint32":  "32",
				"ptr.simple.slice.1.uint64":  "64",
				"ptr.simple.slice.1.float32": "32",
				"ptr.simple.slice.1.float64": "64",
			},
			expected: &SliceConfig{
				StringSlice:  []string{"testA", "testB", "testC"},
				BoolSlice:    []bool{true, false, true},
				IntSlice:     []int{9223372036854775807, 0, -9223372036854775808},
				Int8Slice:    []int8{127, 0, -128},
				Int16Slice:   []int16{32767, 0, -32768},
				Int32Slice:   []int32{2147483647, 0, -2147483648},
				Int64Slice:   []int64{9223372036854775807, 0, -9223372036854775808},
				UintSlice:    []uint{18446744073709551615, 0, 64},
				Uint8Slice:   []uint8{255, 0, 8},
				Uint16Slice:  []uint16{65535, 0, 16},
				Uint32Slice:  []uint32{4294967295, 0, 32},
				Uint64Slice:  []uint64{18446744073709551615, 0, 64},
				Float32Slice: []float32{65535.00390625, 65535.25, 65535.5},
				Float64Slice: []float64{65535.00390625, 65535.25, 65535.5},
				StringMapSlice: []map[string]string{
					{"a": "a", "b": "b", "c": "c"},
					{"d": "d", "e": "e", "f": "f"},
					{"g": "g", "h": "h", "i": "i"},
				},
				SimpleSlice: []SimpleConfig{
					{
						String:  "testA",
						Bool:    true,
						Int:     int(9223372036854775807),
						Int8:    int8(127),
						Int16:   int16(32767),
						Int32:   int32(2147483647),
						Int64:   int64(9223372036854775807),
						Uint:    uint(18446744073709551615),
						Uint8:   uint8(255),
						Uint16:  uint16(65535),
						Uint32:  uint32(4294967295),
						Uint64:  uint64(18446744073709551615),
						Float32: float32(65535.00390625),
						Float64: float64(65535.00390625),
					},
					{
						String:  "testB",
						Bool:    true,
						Int:     int(64),
						Int8:    int8(8),
						Int16:   int16(16),
						Int32:   int32(32),
						Int64:   int64(64),
						Uint:    uint(64),
						Uint8:   uint8(8),
						Uint16:  uint16(16),
						Uint32:  uint32(32),
						Uint64:  uint64(64),
						Float32: float32(32),
						Float64: float64(64),
					},
				},
				PtrSimpleSlice: []*SimpleConfig{
					{
						String:  "testA",
						Bool:    true,
						Int:     int(9223372036854775807),
						Int8:    int8(127),
						Int16:   int16(32767),
						Int32:   int32(2147483647),
						Int64:   int64(9223372036854775807),
						Uint:    uint(18446744073709551615),
						Uint8:   uint8(255),
						Uint16:  uint16(65535),
						Uint32:  uint32(4294967295),
						Uint64:  uint64(18446744073709551615),
						Float32: float32(65535.00390625),
						Float64: float64(65535.00390625),
					},
					{
						String:  "testB",
						Bool:    true,
						Int:     int(64),
						Int8:    int8(8),
						Int16:   int16(16),
						Int32:   int32(32),
						Int64:   int64(64),
						Uint:    uint(64),
						Uint8:   uint8(8),
						Uint16:  uint16(16),
						Uint32:  uint32(32),
						Uint64:  uint64(64),
						Float32: float32(32),
						Float64: float64(64),
					},
				},
			},
		},
	}

	for _, testcase := range testcases {
		t.Run(testcase.description, func(t *testing.T) {
			node, err := New(testcase.element, EncoderOption{})
			require.NoError(t, err)

			flattenMap := util.NewFlattenMap()
			for _, key := range testcase.keys {
				flattenMap.Set(key, testcase.data[key])
			}

			err = node.FillNode(flattenMap)
			if testcase.err != nil {
				require.EqualError(t, testcase.err, fmt.Sprint(err))
			} else {
				require.NoError(t, err)
				assert.Equal(t, testcase.expected, testcase.element)
			}
		})
	}
}
